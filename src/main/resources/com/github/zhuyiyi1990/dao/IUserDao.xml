<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace属性值必须为持久层接口的全限定类名,  命名空间+id来确定唯一的sql语句-->
<mapper namespace="com.github.zhuyiyi1990.dao.IUserDao">
    <!--开启二级缓存-->
    <cache/>

    <!-- 建立 User 实体和数据库表的对应关系
    id 属性：给定一个唯一标识，是给查询 select 标签引用用的。-->
    <resultMap id="userMap" type="user">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="birthday" property="birthday"/>
        <result column="sex" property="sex"/>
        <result column="address" property="address"/>
    </resultMap>

    <resultMap id="userAccountMap" type="user">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="birthday" property="birthday"/>
        <result column="sex" property="sex"/>
        <result column="address" property="address"/>
        <!--配置user中的accounts集合映射
            property指定属性 ofType指定集合中的元素类型-->
        <collection property="accounts" ofType="account" column="id"
                    select="com.github.zhuyiyi1990.dao.IAccountDao.findByUid"/>
    </resultMap>

    <!-- 了解的内容:抽取重复的内容 -->
    <sql id="defaultSql">
        select * from user
    </sql>

    <!--查找所有的用户,及对应的账户信息-->
    <select id="findAll" resultMap="userAccountMap">
        select * from user
    </select>

    <select id="findById" parameterType="int" resultMap="userMap" useCache="true">
        <include refid="defaultSql"/>
        where id = #{id}
    </select>

    <!--保存用户-->
    <insert id="saveUser" parameterType="user">
        <!--keyProperty:属性名(注意区分大小写) keyColumn:列名  order:查询时刻:添加之后-->
        <selectKey keyProperty="id" keyColumn="id" order="AFTER" resultType="int">
            select last_insert_id();
        </selectKey>
        insert into user (username,birthday,sex,address)
        values (#{username},#{birthday},#{sex},#{address})
    </insert>

    <!--更新用户-->
    <update id="updateUser" parameterType="user">
        update user set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address}
        where id=#{id}
    </update>

    <!--删除操作-->
    <delete id="deleteUser" parameterType="int">
        delete from user where id=#{id}
    </delete>

    <!--通过名称模糊查找用户-->
    <select id="findByName" parameterType="String" resultMap="userMap">
        <include refid="defaultSql"/>
        where username like #{username}
    </select>

    <!--统计总记录条数-->
    <select id="findTotal" resultType="int">
        select count(id) from user
    </select>

    <!--根据用户名模糊查询用户信息，查询条件放到 QueryVo 的 user 属性中-->
    <select id="findByQueryVo" parameterType="queryVo" resultMap="userMap">
        <include refid="defaultSql"/>
        where username like #{user.username}
    </select>

    <!--通过用户信息查询用户-->
    <select id="findByUser" parameterType="user" resultType="user">
        <include refid="defaultSql"/>
        <where>
            <if test="username!=null and username!=''">
                and username=#{username}
            </if>
            <if test="sex!=null and sex!=''">
                and sex=#{sex}
            </if>
        </where>
    </select>

    <!--通过QueryVo中的id集合来查询用用户-->
    <select id="findByIds" parameterType="queryvo" resultType="user">
        <include refid="defaultSql"/>
        <where>
            <if test="ids!=null and ids.size>0">
                <foreach collection="ids" open="(" close=")" item="id" separator=" or ">
                    id=#{id}
                </foreach>
            </if>
        </where>
    </select>
</mapper>